{{define "assertion" -}}
    {{- /*gotype: github.com/cweill/gotests/internal/models.TData*/ -}}
    {{- if .ReturnsError}}
        if tt.wantErr != nil {
          {{template "assertError" .}}
        }

        assert.NoError(t, err)
    {{- end}}

    {{template "assertNoError" .}}
{{- end}}


{{define "assertError" -}}
    {{- /*gotype: github.com/cweill/gotests/internal/models.TData*/ -}}
    require.NotNil(t, err)
    assert.Contains(t, err.Error(), tt.wantErr.Error())
    {{- if or (not .Subtests) .PrintInputs -}}
        , fmt.Sprintf("{{template "message" .}}", {{template "inputs" .}})
    {{- end -}}
    )
    // TODO assert side effects

    return
{{- end}}


{{define "assertNoError" -}}
    {{- /*gotype: github.com/cweill/gotests/internal/models.TData*/ -}}
    {{- $f := .}}
    {{- range .TestResults}}
        {{- if .IsWriter}}
            {{template "equal" $f}}(t, tt.{{Want .}}, {{Param .}}.String(){{template "msg" $f}})
        {{- else}}
            {{template "equal" $f}}(t, tt.{{Want .}}, {{Got .}}{{template "msg" $f}})
        {{- end}}
    {{- end}}
    // TODO assert outcomes

{{end}}


{{define "equal"}}assert.Equal{{if or (not .Subtests) .PrintInputs}}f{{end}}{{end}}


{{define "msg"}}{{if or (not .Subtests) .PrintInputs}} , "{{template "message" .}}", {{template "inputs" .}}{{end}}{{end}}